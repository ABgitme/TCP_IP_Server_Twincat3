<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="FB_TcpServer" Id="{11ccbad9-b719-400e-a27c-bc2a18d55685}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_TcpServer
VAR_INPUT
	NetId				: STRING; 	(* address of the TwinCAT TCP/IP Connection Server. For the local computer (default) an empty string may be specified*)
	ServerAdr 			: STRING;	(* Local server IP address (Ipv4) as a string*)
	ServerPort 			: UDINT;	(* Local server IP port *)
	sSend 				: STRING;	(* String to be sent *)
END_VAR
VAR_OUTPUT
	sReceive			: STRING;	(* String received *)
	bBusy				: BOOL;
	err					: BOOL;
	errid				: UDINT;
END_VAR
VAR
	fbSocketCloseAll: FB_SocketCloseAll;
	fbSocketClose: FB_SocketClose;
	bCloseAll			: BOOL := TRUE;
	bSocketCloseError: BOOL;
	nSocketCloseError: UDINT;
		
	Timeout 			: TIME := T#10S;
	fbSocketListen		: FB_SocketListen := (bExecute := TRUE);
	fbSocketReceive		: FB_SocketReceive;
	fbSocketAccept		: FB_SocketAccept;
	fbSocketSend 		: FB_SocketSend;
	hListen				: T_HSOCKET;
	hSocket				: T_HSOCKET;
    
	bConnAccepted		: BOOL;            	
	RxBuffer			: STRING;
	state				: E_State;

	Pulse_timer				: TON;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF bCloseAll THEN 				// On PLC reset or program download close all old connections 
	fbSocketCloseAll(
		sSrvNetId:= '', 
		bExecute:= TRUE, 
		tTimeout:= T#3S, 
		bBusy=> , 
		bError=> bSocketCloseError, 
		nErrId=> nSocketCloseError);
	IF NOT (fbSocketCloseAll.bBusy OR fbSocketCloseAll.bError) THEN
		bCloseAll := FALSE;
		fbSocketCloseAll(bExecute:= FALSE);
	END_IF
END_IF

IF sSend = '' THEN
	sSend := 'Default response';
END_IF
				
Pulse_timer(IN:= , PT:= T#100MS, Q=> , ET=> );

fbSocketListen(							// Open Listener-Socket
		sSrvNetId:= NetId, 			
		sLocalHost:= ServerAdr, 
		nLocalPort:= ServerPort, 
		bExecute:= , 					//The block is activated by a rising edge at this input.
		tTimeout:= Timeout, 			//Maximum time allowed for the execution of the function block
		bBusy=> bBusy, 					//When the function block is activated this output is set. It remains set until and acknowledgement is received
		bError=> err, 					// IF an error should occur during the transfer OF the command, THEN THIS output is set once the bBusy output was reset
		nErrId=> errid, 				// If the bError output is set ,this parameter returns error number
		hListener=> hListen);			// Connection handle for the new listener socket

fbSocketAccept(
		sSrvNetId:= NetId, 
		hListener:= hListen, 
		bExecute:= , 
		tTimeout:= Timeout, 
		bAccepted=> bConnAccepted, 		//This output is set if a new connection to a remote client was established
		bBusy=> bBusy, 
		bError=> err, 
		nErrId=> errid, 
		hSocket=> hSocket);				//Connection handle of a new remote client
	
fbSocketSend(
		sSrvNetId:= NetId, 
		hSocket:= hSocket, 				//connection handle of the communication partner to which data are to be sent.
		cbLen:= LEN(sSend), 			//number of data to be sent in bytes.
		pSrc:= ADR(sSend), 				//address (pointer) of the transmit buffer.
		bExecute:= , 
		tTimeout:= Timeout, 
		bBusy=> bBusy, 
		bError=> err, 
		nErrId=> errid);

fbSocketReceive(
		sSrvNetId:= NetId, 
		hSocket:= hSocket,				// Connection handle of the communication partner from which data are to be received. 
		cbLen:= SIZEOF(RxBuffer), 		//Maximum available buffer size in bytes for the data to be read.
		pDest:= ADR(RxBuffer), 			//Address (pointer) of the receive buffer.
		bExecute:= , 
		tTimeout:= Timeout, 
		bBusy=> bBusy, 
		bError=> err, 
		nErrId=> errid, 
		nRecBytes=> );					// Number of the last successfully receive data bytes
		
fbSocketClose(																// Close Socket
		sSrvNetId:= '', 
		hSocket:= hListen, 
		bExecute:= , 
		tTimeout:= T#4S, 
		bBusy=> , 
		bError=> err, 
		nErrId=> errid);
		
CASE state OF
	E_State.STATE_INIT:

		//Open the port
		fbSocketListen.bExecute := TRUE;
		
		IF fbSocketListen.bError THEN
			state := E_State.STATE_ERROR_CLOSE_LISTEN;
		END_IF
		state := E_State.STATE_CONNECTING;
		
		
	E_State.STATE_CONNECTING:
		fbSocketListen.bExecute := FALSE;
		//Accept incoming connection every 100ms
		IF NOT fbSocketListen.bBusy AND NOT fbSocketListen.bError THEN
			fbSocketAccept.bExecute := FALSE;
			Pulse_timer.IN := TRUE;
	
			
			IF bConnAccepted THEN
				fbSocketReceive.bExecute := TRUE;
				state := E_State.STATE_RECEIVING_DATA;
			ELSIF Pulse_timer.Q THEN
				fbSocketAccept.bExecute := TRUE;
				Pulse_timer.IN := FALSE;
			ELSIF fbSocketAccept.bError THEN
				state := E_State.STATE_ERROR_CLOSE_LISTEN;
			END_IF
		END_IF
	
		
	E_State.STATE_RECEIVING_DATA:
		fbSocketReceive.bExecute := FALSE;
		
		IF NOT fbSocketReceive.bBusy AND NOT fbSocketReceive.bError THEN
			IF fbSocketReceive.nRecBytes = 0 THEN
				//if there's no data received, reset the fbSocketReceive
				fbSocketReceive.bExecute := TRUE;
			ELSE
				MEMSET(ADR(sReceive),0,SIZEOF(sReceive));
				MEMCPY(ADR(sReceive), fbSocketReceive.pDest, fbSocketReceive.nRecBytes);
				

				fbSocketSend.bExecute := TRUE;
				state := E_State.STATE_SENDING_DATA;
			END_IF
		ELSIF fbSocketReceive.bError THEN					// Close connection when error is occuring 
				state := E_State.STATE_ERROR_CLOSE_LISTEN;
		END_IF
	
		
	E_State.STATE_SENDING_DATA:
		fbSocketSend.bExecute := FALSE;
		
		IF NOT fbSocketSend.bBusy AND NOT fbSocketSend.bError THEN 
				fbSocketReceive.bExecute := TRUE;
				state := E_State.STATE_RECEIVING_DATA;
		ELSIF fbSocketSend.bError THEN
				state := E_State.STATE_ERROR_CLOSE_LISTEN;
		END_IF
		
	E_State.STATE_ERROR_CLOSE_LISTEN:
													// Close Listener-Socket
		IF (NOT fbSocketClose.bBusy) OR fbSocketClose.bError THEN
			fbSocketClose.bExecute := TRUE;
			fbSocketClose.hSocket.handle := 0;
			fbSocketClose.bExecute := FALSE;
		END_IF
		
END_CASE

]]></ST>
    </Implementation>
    <LineIds Name="FB_TcpServer">
      <LineId Id="145" Count="10" />
      <LineId Id="8" Count="0" />
      <LineId Id="156" Count="0" />
      <LineId Id="9" Count="50" />
      <LineId Id="184" Count="0" />
      <LineId Id="227" Count="6" />
      <LineId Id="176" Count="0" />
      <LineId Id="60" Count="2" />
      <LineId Id="197" Count="0" />
      <LineId Id="63" Count="2" />
      <LineId Id="162" Count="1" />
      <LineId Id="161" Count="0" />
      <LineId Id="200" Count="0" />
      <LineId Id="66" Count="8" />
      <LineId Id="219" Count="0" />
      <LineId Id="75" Count="5" />
      <LineId Id="220" Count="1" />
      <LineId Id="81" Count="18" />
      <LineId Id="225" Count="1" />
      <LineId Id="100" Count="8" />
      <LineId Id="171" Count="1" />
      <LineId Id="109" Count="0" />
      <LineId Id="173" Count="0" />
      <LineId Id="158" Count="0" />
      <LineId Id="202" Count="0" />
      <LineId Id="187" Count="0" />
      <LineId Id="189" Count="0" />
      <LineId Id="234" Count="1" />
      <LineId Id="186" Count="0" />
      <LineId Id="198" Count="0" />
      <LineId Id="110" Count="1" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>